# -*- coding: utf-8 -*-
"""
Created on Wed Apr  6 11:24:55 2022

@author: DECLINE
"""

import numpy as np
import matplotlib.pyplot as plt

#3141 décimales !!!
pi

#3333 décimales !!!
e

#2222 décimales !!!
sqrt

clist=['black','b','r','y','g','orange','violet','c','darkviolet','firebrick']



#fonction min
def indice_min(liste):
    mini=liste[0]
    indice_min=0
    for i in range(len(liste)):
        if liste[i]<=mini:
            mini=liste[i]
            indice_min=i
    return indice_min


#fonction max
def indice_max(liste):
    maxi=liste[0]
    indice_max=0
    for i in range(len(liste)):
        if liste[i]>=maxi:
            maxi=liste[i]
            indice_max=i
    return indice_max


#fonction plots
def f(x):
    if x==e:
        troncature=3333
    elif x==pi:
        troncature=3141
    elif x==sqrt2:
        troncature=2222
    liste=[int(i) for i in str(x)]
    del liste[troncature:]

    ilist=[i for i in range(1,len(liste)+1)]
    blist=[0 for i in range(1,len(liste)+1)]

    list0=[]
    list1=[]
    list2=[]
    list3=[]
    list4=[]
    list5=[]
    list6=[]
    list7=[]
    list8=[]
    list9=[]
    listn=[list0,list1,list2,list3,list4,list5,list6,list7,list8,list9]

    nb0=[]
    nb1=[]
    nb2=[]
    nb3=[]
    nb4=[]
    nb5=[]
    nb6=[]
    nb7=[]
    nb8=[]
    nb9=[]
    nbn=[nb0,nb1,nb2,nb3,nb4,nb5,nb6,nb7,nb8,nb9]

    for i in range(10):
        m=0
        n=0
        for j in liste:
            m+=1
            if i==int(j):
                n+=1
                listn[i].append(m)
                nbn[i].append(n)
            else:
                listn[i].append(0)
                nbn[i].append(n)



        plt.figure(1,dpi=300)
        plt.plot(ilist,listn[i],c=clist[i],label=str(i),linewidth=0.1)
        plt.plot(listn[i],ilist,c=clist[i],linewidth=0.1)
        plt.plot(ilist,blist,c='black',linewidth=2)
        plt.plot(blist,ilist,c='black',linewidth=2)
        plt.figure(2,dpi=300)
        plt.plot(ilist,nbn[i],c=clist[i],linewidth=0.5,label=str(i))
        plt.legend()
        
    plt.figure(3,dpi=300)

    '''
    plt.ylim([0, 10])
    '''

    plt.plot(ilist,liste,c='black',linewidth=0.3)




    premier=[]
    indexpremier=[]
    dernier=[]
    indexdernier=[]
    
    for i in range(len(ilist)):
        nlist=[]
        for j in range(len(nbn)):
            
            nlist.append(nbn[j][i])
        premier.append(max(nlist))
        indexpremier.append(indice_max(nlist))
        dernier.append(min(nlist))
        indexdernier.append(indice_min(nlist))
    
    plt.figure(4,dpi=300)
    plt.plot(ilist,indexpremier,linewidth=0.5,c='r',label='premier')
    plt.plot(ilist,indexdernier,linewidth=0.5,c='c',label='dernier')
    plt.legend()


def g(x,y,z):
    cvar=['r','b','g']
    var=[x,y,z]
    for i in var:
        liste=[]
        troncature=2222
        liste=[int(i) for i in str(i)]

        del liste[troncature:]

        nb=[i for i in range(10)]
        ilist=[i for i in range(1,len(liste)+1)]
    
        list0=[]
        list1=[]
        list2=[]
        list3=[]
        list4=[]
        list5=[]
        list6=[]
        list7=[]
        list8=[]
        list9=[]
        listn=[list0,list1,list2,list3,list4,list5,list6,list7,list8,list9]
        
        nb0=[]
        nb1=[]
        nb2=[]
        nb3=[]
        nb4=[]
        nb5=[]
        nb6=[]
        nb7=[]
        nb8=[]
        nb9=[]
        nbn=[nb0,nb1,nb2,nb3,nb4,nb5,nb6,nb7,nb8,nb9]
    
    
        for j in nb:
            m=0
            n=0
            for k in liste:
                m+=1
                if i==int(k):
                    n+=1
                    listn[j].append(m)
                    nbn[j].append(n)
                else:
                    listn[j].append(0)
                    nbn[j].append(n)

            plt.figure(j+5,dpi=300)
            plt.title(str(nb[j]))
            plt.plot(ilist,nbn[j],c=cvar[j],label=str(j),linewidth=0.1)
            # plt.plot(ilist,nbn[i],label=str(var[i]),c=clist[i])
            plt.legend()
            plt.grid()





''' y=x?

premier=[]
indexlist=[]
nlist=[]
for i in range(len(ilist)):
    for j in range(len(nbn)):
        
        nlist.append(nbn[j][i])
    premier.append(max(nlist))
    indexlist.append(indice_max(nlist))

plt.figure(5,dpi=300)
plt.plot(ilist,indexlist)


this is not achieved yet...

    fig = plt.figure()
    gs = fig.add_gridspec(2, 5, hspace=0, wspace=0)
    (ax1, ax2, ax3, ax4, ax5), (ax6, ax7, ax8, ax9, ax10) = fig.subplots(sharex='col', sharey='row')
    axs=[ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9, ax10]
    axs[i].plot(ilist2,listn2[i],c=clist[i])
    axs[i].plot(listn2[i],ilist2,c=clist[i])

#---------------------------------------------------#
            digits of pi with functions

#partie fractionnaire*10

def p_frac(x):
    return 10*(x-int(x))

#fonction itération

def f_n(x,n):
    if n==1:
        return p_frac(x)
    if n>1:
        return f_n(f_n(x,1),n-1)
    
#fonction qui renvoie la x-ième décimale

def x_pi(x):
    return int(f_n(pi,x))

d=50
pilist2=[]
ilist2=[]
blist2=[]
for i in range(1,d):
    pilist2.append(x_pi(int(i)))
    ilist2.append(i)
    blist2.append(0)
plt.plot(ilist2,pilist2,linewidth=2,c='black')
plt.show()

list02=[]
list12=[]
list22=[]
list32=[]
list42=[]
list52=[]
list62=[]
list72=[]
list82=[]
list92=[]
listn2=[list02,list12,list22,list32,list42,list52,list62,list72,list82,list92]
for i in range(10):
    k=0
    for j in pilist2:
        k+=1
        if i==j:
            listn[i].append(k)
        else:
            listn[i].append(0)
    plt.figure(1)
    plt.plot(ilist2,listn2[i],c=clist2[i],label=str(i))
    plt.plot(listn2[i],ilist2,c=clist2[i])
    plt.plot(ilist2,blist2,c='w',linewidth=2)
    plt.plot(blist2,ilist2,c='w',linewidth=2)
    plt.legend()


'''